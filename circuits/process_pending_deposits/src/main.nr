/* Note: Exponential ElGamal only supports plaintexts constrained to 40 bits, 
because solving the Discrete Log is needed during decryption
It is the responsiblity of the smart contract developer to ensure 
that all plaintexts are in the u40 range before encryption
*/
use dep::std::ec::tecurve::affine::Curve as AffineCurve;
use dep::std::ec::tecurve::affine::Point as Gaffine;
use dep::std::collections::vec::Vec;
use dep::std;
use dep::noir_bigint::BigUint56;
use dep::bjj;

/* Code of the circuit used at each transfer of the token to prove the validity of transfer (sender 
has enough balance) and correctness of encrypted new balances of sender and receiver.
To be sure this is not vulnerable, we added a check in the smart contract to make sure that sender
is different from receiver (a nonce variable is not needed in our case because transfers are 
initiated by from=msg.sender in the contract, so replay attack is impossible)
*/

// This proof can be generated by anyone

// randomness will be known by processor, but the input amount is already public
// so no info is leaked
fn main(
        randomness: Field, // randomness used for encryption
        // Public inputs, this can be executed by anyone
        public_key_to: pub Gaffine, 
        account_address: pub Field,
        amountSum: pub u40,
        balance_old_to_encrypted_1: pub Gaffine, 
        balance_old_to_encrypted_2: pub Gaffine,
        balance_new_to_encrypted_1: pub Gaffine, 
        balance_new_to_encrypted_2: pub Gaffine,
    ) { 

    // check that new balance = the balance_old_me_clear - fee

    assert(std::hash::poseidon::bn254::hash_2([public_key_to.x, public_key_to.y]) == account_address);

    let bjj_affine: AffineCurve = AffineCurve::new(bjj_a, bjj_d, Gaffine::new(bjj_generator_x, bjj_generator_y));
    
    let mut encrypted_amount = bjj::exp_elgamal_encrypt(public_key_to, amountSum, randomness);

    // addition of the points on Baby Jubjub : this operation is additevely homomorphic for Exponential ElGamal
    let balance_new_to_encrypted_computed = 
        (bjj_affine.add(balance_old_to_encrypted_1, encrypted_amount.0),bjj_affine.add(balance_old_to_encrypted_2, encrypted_amount.1)); 
    // checks that the new encrypted balance of receiver is correct
    assert((balance_new_to_encrypted_computed.0.x==balance_new_to_encrypted_1.x) & 
            (balance_new_to_encrypted_computed.0.y==balance_new_to_encrypted_1.y) & 
            (balance_new_to_encrypted_computed.1.x==balance_new_to_encrypted_2.x) & 
            (balance_new_to_encrypted_computed.1.y==balance_new_to_encrypted_2.y)); 

}

// Because of a bug in Noir 10.3, this test will cause a stack overflow error, but you can check that it passes via `nargo prove` instead of `nargo test`: the values inside Prover.toml are strictly equivalent to this test
#[test]
fn test_main() {
   
    // public values
    // let public_key_me: Gaffine = bjj_priv_to_pub_key(private_key);
    // let public_key_to: Gaffine = bjj_priv_to_pub_key(2397698694665525209403000085013646741088197704326090841842743616643093564368); // bjj_priv_to_pub_key(private_key_to)
    // let balance_old_me_encrypted : (Gaffine,Gaffine) = bjj_exp_elgamal_encrypt(public_key_me, balance_old_me_clear, 1223911427385630814994881905088740515414339792865684838215099796087690786721);
    // let balance_old_to_encrypted : (Gaffine,Gaffine) = bjj_exp_elgamal_encrypt(public_key_to, 42, 1391605116707840153256607813912547565986654451413670922768018807428594876790);
    // let balance_new_me_encrypted : (Gaffine,Gaffine) = bjj_exp_elgamal_encrypt(public_key_me, 9900, randomness1);
    // let balance_new_to_encrypted : (Gaffine,Gaffine) = bjj_exp_elgamal_encrypt(public_key_to, 142, 1391605116707840153256607813912547565986654451413670922768018807428594876790+randomness2);

    // main( public_key_to, balance_old_me_encrypted.0, balance_old_me_encrypted.1, balance_old_to_encrypted.0,
    //  balance_old_to_encrypted.1, balance_new_me_encrypted.0, balance_new_me_encrypted.1, balance_new_to_encrypted.0,  balance_new_to_encrypted.1);
}